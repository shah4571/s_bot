# bot/handlers/account.py

from pyrogram import Client, filters
from pyrogram.types import Message
from bot.utils import storage
import datetime

def init(app: Client) -> None:

    @app.on_message(filters.command("balance") & filters.private)
    async def balance_handler(client: Client, message: Message):
        user_id = message.from_user.id

        # ржЗржЙржЬрж╛рж░рзЗрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржПржмржВ ржЕржирзНржпрж╛ржирзНржп рждржерзНржп рж╕ржВржЧрзНрж░рж╣
        user_info = storage.get_user_info(user_id)
        if not isinstance(user_info, dict):
            await message.reply(
                "тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ рждржерзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            )
            return

        balance = user_info.get("balance", 0.0)
        success_count = user_info.get("success_count", 0)
        join_timestamp = user_info.get("join_date")

        # ржЬрзЯрзЗржи рждрж╛рж░рж┐ржЦ ржлрж░ржорзНржпрж╛ржЯрж┐ржВ (ржпржжрж┐ ржерж╛ржХрзЗ)
        if join_timestamp:
            try:
                join_date = datetime.datetime.fromtimestamp(join_timestamp).strftime("%d %b, %Y")
            except Exception:
                join_date = "ржЕржЬрж╛ржирж╛"
        else:
            join_date = "ржЕржЬрж╛ржирж╛"

        # рж░рзЗрж╕ржкржирзНрж╕ ржорзЗрж╕рзЗржЬ
        text = (
            f"ЁЯз╛ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп:\n\n"
            f"тАв ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {user_id}\n"
            f"тАв тЬЕ рж╕ржлрж▓ рж╕рзЗрж╢ржи рж╕ржВржЦрзНржпрж╛: {success_count}\n"
            f"тАв ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${balance:.2f}\n"
            f"тАв ЁЯУЕ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗржи: {join_date}"
        )

        await message.reply(text)
