# bot/handlers/admin.py

from pyrogram import Client, filters
from pyrogram.types import Message
from bot.config import ADMIN_ID
from bot import storage  # Ensure you have this module for user management
import asyncio
from pyrogram.errors import FloodWait, UserIsBlocked, PeerIdInvalid


def init(app: Client):

    @app.on_message(filters.command("admin") & filters.user(ADMIN_ID) & filters.private)
    async def admin_panel(client: Client, message: Message):
        """
        ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡•§
        ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ADMIN_ID ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡•§
        """
        text = (
            "üõ°Ô∏è ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®!\n\n"
            "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°:\n"
            "/broadcast <‡¶Æ‡ßá‡¶∏‡ßá‡¶ú> - ‡¶∏‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§\n"
            "/stats - ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶∏‡ßç‡¶ü‡¶ø‡¶ï‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì‡•§\n"
        )
        await message.reply(text)

    @app.on_message(filters.command("broadcast") & filters.user(ADMIN_ID) & filters.private)
    async def broadcast_message(client: Client, message: Message):
        """
        ‡¶∏‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡•§
        ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: /broadcast <‡¶Æ‡ßá‡¶∏‡ßá‡¶ú>
        """
        if len(message.command) < 2:
            await message.reply("‚ùå ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßã‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /broadcast Hello everyone!")
            return

        broadcast_text = message.text.split(None, 1)[1]

        user_ids = await storage.get_all_user_ids()

        success_count = 0
        failed_count = 0

        for user_id in user_ids:
            try:
                await client.send_message(user_id, broadcast_text)
                success_count += 1
                await asyncio.sleep(0.1)  # Avoid hitting flood limits
            except FloodWait as e:
                await asyncio.sleep(e.value)
                try:
                    await client.send_message(user_id, broadcast_text)
                    success_count += 1
                except Exception:
                    failed_count += 1
            except (UserIsBlocked, PeerIdInvalid):
                failed_count += 1
            except Exception as e:
                print(f"‚ùå Error sending to {user_id}: {e}")
                failed_count += 1

        await message.reply(
            f"‚úÖ ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!\n\n‡¶∏‡¶´‡¶≤: {success_count}\n‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {failed_count}"
        )
